import Node as nd
import importlib
import os, json
import shutil
from pydantic import BaseModel

class CustomErrorModel(BaseModel):
    """
    the customized error class returned by the main_pipeline
    if exception catched.
    """
    function_name: str
    traceback: str

import sys
sys.path.append("..")

def main_pipeline(nodes: list[nd.Node]):
    """
    This function is to run the pipeline generated by the user and 
    move all the generated files to the unique fodler and return
    the folder name to the user.

    Parameters:
    - nodes list[Node]: a list of node. node is a class that inculdes the name
        of the function with its paramters.

    Returns:
    - fodler: the name of the folder that contains the generated files.
    - exception: if any exception raised when running a pipeline, return it to the user,
        and remove all generated files.
    """

    function_name = ""

    try:
        for _, module_function, _, params in nodes:
            parts = module_function[1].split('.')
            if parts[0] not in globals():
                module = importlib.import_module('.'.join(parts[:-1]))
                function = getattr(module, parts[-1])
                function_name = function.__name__
                function(*(params[1]))
            else:
                function = eval(module_function[1])
                function_name = module_function[1]
                function(*(params[1]))
    except Exception as error:

        files = [f for f in os.listdir() if os.path.isfile(f) and str(f) != "run" and ".py" not in str(f) and ".json" not in str(f)]
        with open("user_upload.json","r") as file:
            jsonData = json.load(file)
    
        for file in files:
            if file not in jsonData["files"]:
                os.remove(file)

        custom_error_model = CustomErrorModel(
            # function_name = traceback.format_exc().splitlines()[-3].split('"')[1].split('/')[-1],
            function_name = function_name,
            # traceback = traceback.format_exc().splitlines()[-1]  # Capture the traceback
            traceback = str(error)
        )
        return custom_error_model

    folder = "folder1"
    folder_id = 1
    directories = [d for d in os.listdir(os.getcwd()) if os.path.isdir(os.path.join(os.getcwd(), d))]
    for _ in directories:
        if folder not in directories:
            break
        else:
            folder_id += 1
            folder = folder[:6] + str(folder_id)


    files = [f for f in os.listdir() if os.path.isfile(f) and str(f) != "run" and ".py" not in str(f) and ".json" not in str(f)]
    if not os.path.exists(folder):
        os.makedirs(folder)

    with open("user_upload.json","r") as file:
        jsonData = json.load(file)
    
    for file in files:
        if file not in jsonData["files"]:
            shutil.move(file, folder)

    return folder