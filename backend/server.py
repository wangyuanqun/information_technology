from fastapi import FastAPI, UploadFile
from fastapi.middleware.cors import CORSMiddleware
import Node as nd
import pipeline_handler, import_service_handler
from fastapi.responses import FileResponse
from fastapi.responses import HTMLResponse
import os, json
from sort import pipeline_sort

# gloabal list to save the uploads csv

app = FastAPI()

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.post("/pipeline")
def execute_pipeline(nodes: list[nd.Node]) -> dict:
    """
    This API is used to run pipeline.

    Parameters:
    - nodes (list[nd.Node]): pipeline nodes generated from frontend

    Returns:
    - dict: pipeline outputs in json
    """
    sorted_nodes = pipeline_sort(nodes);
    value = pipeline_handler.main_pipeline(sorted_nodes)
    if "str" not in str(type(value)):
        return {
            "status": "fail",
            "data": value,
        }

    return {
        "status": "success",
        "data": value,
    }

@app.get("/download_file")
def download_file(name: str, folder: str):
    """
    This API is used to download the file generated by pipeline to frontend.

    Parameters:
    - name (str): the filename that the user want to download

    Returns:
    - dict: error json
    - file: the file that the user wants
    """
    folder_of_documents = folder
    files = [f for f in os.listdir(folder_of_documents) if os.path.isfile(os.path.join(folder_of_documents, f))]

    for filename in files:
        if filename == name:
            file_path = os.path.join(folder_of_documents, filename)
            return FileResponse(file_path, headers={"Content-Disposition": "attachment; filename="+name})
    return {
        "status": "fail",
        "data": "no such file " + name
    }

@app.get("/csv_information")
def get_csv_information():
    """
    This API is used to get the information of csv files generated by pipeline.

    Parameters:
    - None

    Returns:
    - dict: csv files' information including file name and file size.
    """
    lists = []
    files = [f for f in os.listdir() if os.path.isfile(f)]

    for filename in files:
        file_size = os.path.getsize(filename)
        if ".csv" in filename:
            jsonobj = {
                "filename": filename,
                "size": str(file_size)+" bytes"
            }
            lists.append(jsonobj)

    return {
        "status": "success",
        "data": lists
    }

@app.get("/service_information")
def get_service_information():
    """
    This API is used to get the content of micro servcices uploaded by users

    Parameters:
    - None

    Returns:
    - dict: services' information including file name and file size.
    """
    lists = []
    folder_of_documents = "uploads"
    files = [f for f in os.listdir(folder_of_documents) if os.path.isfile(os.path.join(folder_of_documents, f))]

    for filename in files:
        file_path = os.path.join(folder_of_documents, filename)
        file_size = os.path.getsize(file_path)
        if ".py" in filename:
            jsonobj = {
                "filename": filename,
                "size": str(file_size)+" bytes"
            }
            lists.append(jsonobj)

    return {
        "status": "success",
        "data": lists
    }

@app.delete("/delete_csv")
def delete_csv():
    """
    This API is used to delete all the csv files that generated by pipeline.

    Parameters:
    - None

    Returns:
    - dict: confirmation of deleting all csv files excluding the files uploaded by the user.
    """
    files = [f for f in os.listdir() if os.path.isfile(f)]
    for file in files:
        if ".csv" in str(file):
            if os.path.isfile(file):
                os.remove(file)

        json_file_list = {
                "files": []
            }

        with open("user_upload.json", "w") as f:
            json.dump(json_file_list,f)


    return {
        "status": "success",
        "data": {}
    }

@app.delete("/delete_service")
def delete_service():
    """
    This API is ued to delete all the services uploaded by user.

    Parameters:
    - None

    Returns:
    - dict: confirmation of deleting all the uploaded services.
    """
    folder_of_documents = "uploads"
    files = [f for f in os.listdir(folder_of_documents) if os.path.isfile(os.path.join(folder_of_documents, f))]
    for file in files:
        if ".py" in str(file):
            file_path = os.path.join(folder_of_documents, file)
            if os.path.isfile(file_path):
                os.remove(file_path)
    return {
        "status": "success",
        "data": {}
    }


@app.post("/uploadfile")
def upload_file(file: UploadFile):
    """
    This API is ued to download file from frontend.

    Parameters:
    - file (UploadFile): the file from frontend

    Returns:
    - dict: confirmation of uploading a csv file.
    - exception: can not open files.
    """
    try:
        with open(f"{file.filename}", "wb") as f:
            f.write(file.file.read())

        json_file_list = {
            "files": []
        }
        with open("user_upload.json","r") as f:
            jsonData = json.load(f)
            json_file_list["files"] += jsonData["files"]
            if file.filename not in json_file_list["files"]:
                json_file_list["files"].append(file.filename)

        with open("user_upload.json", "w") as f:
            json.dump(json_file_list,f)

        return {
            "status": "success",
            "data": {
                "filename": file.filename
            }
        }
    except Exception:
        return {
            "status": "error",
            "msg": "File upload failed"
        }

@app.post("/uploadMS")
def upload_MS(file: UploadFile):
    """
    This API is ued to download microservice from frontend.

    Parameters:
    - None

    Returns:
    - dict: confirmation of uplading service file.
    - exception: can not open service file.
    """
    try:
        with open(f"uploads/{file.filename}", "wb") as f:
            f.write(file.file.read())

        return {
            "status": "success",
            "data": {}
        }
    except Exception:
        return {
            "status": "error",
            "msg": "Service upload failed"
        }

@app.get("/all_services")
def all_services():
    """
    This API is ued to send all the micorservices' information to frontend.

    Parameters:
    - None

    Returns:
    - dict: all services' information including function names, types and parameters.
    """
    folder_of_documents = "uploads"
    if not os.path.exists(folder_of_documents):
        os.makedirs(folder_of_documents)

    files = [f for f in os.listdir(folder_of_documents) if os.path.isfile(os.path.join(folder_of_documents, f)) and ".py" in str(f)]
    list_in = []
    list_proc = []
    list_out = []

    with open("backend_ms.json","r") as file:
        jsonData = json.load(file)
        list_in += jsonData["in"]
        list_proc += jsonData["proc"]
        list_out += jsonData["out"]

    fid = 13 # change the number when the backend microservices updated
    for file in files:
        if ".py" in str(file):
            module_name = "uploads." + str(file).split('.')[0]
            jobj, fid = import_service_handler.import_service(module_name, fid)
            for i in jobj["in"]:
                list_in.append(i)

            for j in jobj["proc"]:
                list_proc.append(j)

            for k in jobj["out"]:
                list_out.append(k)
    return {
            "status": "success",
            "data": {
                "in": list_in,
                "proc": list_proc,
                "out": list_out
            }
        }

@app.get("/show_html")
def show_html(name: str, folder: str):
    """
    This API is ued to send html file to frontend.

    Parameters:
    - name (str): the file name.
    - folder (str): the folder that html file existed.

    Returns:
    - html file: the html file.
    - exception: error if the file can not open.
    """
    folder_of_documents = folder
    files = [f for f in os.listdir(folder_of_documents) if os.path.isfile(os.path.join(folder_of_documents, f))]

    for filename in files:
        if filename == name:
            file_path = os.path.join(folder_of_documents, filename)
            with open(file_path, "r") as f:
                html = f.read()
            return HTMLResponse(content=html, status_code=200)
    return {
        "status": "fail",
        "data": "no such file " + name
    }

@app.get("/get_generations")
def get_generations(folder: str):
    """
    This API is ued to send all generated files to frontend.

    Parameters:
    - folder (str): the folder that generated files existed.

    Returns:
    - dict: generated files.
    """
    files = [str(f) for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]

    return {
        "status": "success",
        "data": files
    }
